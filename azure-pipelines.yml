# # Node.js React Web App to Linux on Azure
# # Build a Node.js React app and deploy it to Azure as a Linux web app.
# # Add steps that analyze code, save build artifacts, deploy, and more:
# # https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# trigger:
# - main

# variables:

#   # Azure Resource Manager connection created during pipeline creation
#   azureSubscription: 'aef82e9d-7d47-4a16-8c4a-506c8ee832b6'

#   # Web app name
#   webAppName: 'aplate'

#   # Environment name
#   environmentName: 'aplate'

#   # Agent VM image name
#   vmImageName: 'ubuntu-latest'

# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)

#     steps:
#     - task: ArchiveFiles@2
#       displayName: 'Archive files'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
#         includeRootFolder: false
#         archiveType: zip
#         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         replaceExistingArchive: true

#     - upload: $(Build.ArtifactStagingDirectory)
#       artifact: drop

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: $(environmentName)
#     pool:
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             displayName: 'Azure App Service Deploy: aplate'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               appType: webAppLinux
#               WebAppName: $(webAppName)
#               packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
#               RuntimeStack: 'NODE|10.10'
#               StartupCommand: 'npm run start'
#               ScriptType: 'Inline Script'
#               InlineScript: |
#                 npm install
#                 npm run build --if-present

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool: 'vmss-nprod-lx'

variables:
  tfversion: '1.2.8'
  tfVarFile: "sparkle-uat.tfvars"
  azure_service_connection: 'Infra-UAT-SC'
  bkstorrg: 'rg-uat-tfstate-sa'
  bkstor: 'uatinfrastatesa'
  bkcontainer: 'tfstatefiles'
  bkstorkey: 'pipeline-uat-test-tfstate'

stages:
  - stage: tfscan
    displayName: 'Stage 1 - Security Scan'
    jobs:
      - job: checkov
        continueOnError: false
        steps:
          - checkout: self
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
          - script: |
              python -m pip install --upgrade pip
              pip install checkov
            displayName: 'Install Checkov'
          - script: |
              checkov -d .
            displayName: 'Scan Terraform code'

  - stage: tfvalidate
    displayName: 'Stage 2 - Validation'
    condition: succeeded('tfscan')
    dependsOn: tfscan
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(tfversion)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(azure_service_connection)'
              backendAzureRmResourceGroupName: '$(bkstorrg)'
              backendAzureRmStorageAccountName: '$(bkstor)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstorkey)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'

  - stage: tfplan
    displayName: 'Stage 3 - Plan'
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: plan
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(tfversion)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(azure_service_connection)'
              backendAzureRmResourceGroupName: '$(bkstorrg)'
              backendAzureRmStorageAccountName: '$(bkstor)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstorkey)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var-file="$(tfVarFile)"'
              environmentServiceNameAzureRM: '$(azure_service_connection)'
  
  - stage: approve
    displayName: 'Stage 4 - Approve'
    condition: succeeded('tfplan')
    dependsOn: tfplan
    pool: server
    jobs:
      - job: approve
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 60
            inputs:
              instructions: 'Review and approve the deployment plan in the next hour.'
            
  - stage: tfdeploy
    displayName: 'Stage 5 - Deploy'
    condition: succeeded('approve')
    dependsOn: approve
    jobs:
      - job: apply
        steps: 
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(tfversion)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(azure_service_connection)'
              backendAzureRmResourceGroupName: '$(bkstorrg)'
              backendAzureRmStorageAccountName: '$(bkstor)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstorkey)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var-file="$(tfVarFile)"'
              environmentServiceNameAzureRM: '$(azure_service_connection)'
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-var-file="$(tfVarFile)"'
              environmentServiceNameAzureRM: '$(azure_service_connection)'